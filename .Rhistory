library(pacman)
p_load(tidyverse)
p_load(stringr)
p_load(tictoc)
library(pacman)
p_load(tidyverse)
p_load(stringr)
p_load(tictoc)
#Define my functions
# source("C:/Users/Gemma/Documents/UNISA/Honours/Project 2017/honours_project/ranmin.R")
source("E:/Project/honours_project/ranmin.R")
# pmedfolder = "C:/Users/Gemma/Documents/UNISA/Honours/Project 2017/HONPR2C Coding/TestProblems/pmed"
pmedfolder <- "E:/Project/TestProblems/pmed"
problem <- 1
x <- read_rds(str_c(pmedfolder, problem, ".rds"))
Pstar <- vector(mode = "numeric", length=x$p)
u <- vector(mode = "numeric", length=x$vertices)
u[1:x$vertices] <- Inf
c <- vector(mode = "numeric", length=x$vertices)
for (j in seq(from=1, to=x$vertices)){
c[j] <- sum(pmin(x$distancematrix[,j], u))
}
data_frame(1:x$vertices)
M <- data_frame(1:x$vertices)
Pstar
M - Pstar
Pstar[1] <- 100
M - Pstar
M <- as.vector(1:x$vertices, mode = "numeric")
M - Pstar
M[-Pstar]
x$distancematrix[,M]
#STEP 1
#For each node that is not already a median, find the minimum between d & c to every other node
M <- M[-Pstar]
x$distancematrix[,M]
x$distancematrix[1:3,M]
Pstar[2] <- 98
M <- M[-Pstar]
M
x$distancematrix[1:3,M]
M
